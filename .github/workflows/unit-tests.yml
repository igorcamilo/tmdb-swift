name: "Unit tests"
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: read
jobs:
  xcode-tests:
    name: Xcode 16.4 (${{ matrix.name }})
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        include:
        - name: iOS
          destination: platform=iOS Simulator,arch=arm64,OS=18.5,name=iPhone 16
        - name: macOS
          destination: platform=macOS,arch=arm64
        - name: tvOS
          destination: platform=tvOS Simulator,arch=arm64,OS=18.5,name=Apple TV 4K (3rd generation)
        - name: visionOS
          destination: platform=visionOS Simulator,arch=arm64,OS=2.5,name=Apple Vision Pro
        - name: watchOS
          destination: platform=watchOS Simulator,arch=arm64,OS=11.5,name=Apple Watch Series 10 (42mm)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install xcresultparser
      run: brew install xcresultparser
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_16.4.app
    - name: Build and run tests
      run: xcrun xcodebuild test -scheme TMDB -resultBundlePath "Artifacts/testResult.xcresult" -destination "${{ matrix.destination }}" -enableCodeCoverage YES CODE_SIGNING_ALLOWED=NO SWIFT_TREAT_WARNINGS_AS_ERRORS=YES
    - if: always()
      name: Convert xcresult to JUnit
      run: xcresultparser -o junit Artifacts/testResult.xcresult > Artifacts/testResult.xml
    - if: always()
      name: Convert xcresult to HTML
      run: xcresultparser -o html Artifacts/testResult.xcresult > Artifacts/testResult.html
    - if: always()
      name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - if: always()
      name: Upload test results to Codecov
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - if: always()
      name: Upload Xcode result bundle
      uses: actions/upload-artifact@v4
      with:
        name: Artifacts (${{ matrix.name }})
        path: Artifacts
  swift-tests-linux:
    name: Swift ${{ matrix.swift-version }} (Linux)
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        swift-version:
        - "6.1"
        - "6.0"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Swift and run tests
      run: |
        sudo apt-get -y install libcurl4-openssl-dev
        curl -O https://download.swift.org/swiftly/linux/swiftly-$(uname -m).tar.gz
        tar zxf swiftly-$(uname -m).tar.gz
        ./swiftly init --skip-install --quiet-shell-followup
        . "${SWIFTLY_HOME_DIR:-$HOME/.local/share/swiftly}/env.sh"
        hash -r
        swiftly install --use ${{ matrix.swift-version }}
        swiftly run swift --version
        swiftly run swift test -Xswiftc -warnings-as-errors
  swift-tests-macOS:
    name: Swift ${{ matrix.swift-version }} (macOS)
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - swift-version: "6.1"
          xcode-version: "16.3"
          runner: macos-15
        - swift-version: "6.0"
          xcode-version: "16.0"
          runner: macos-15
        - swift-version: "5.10"
          xcode-version: "15.3"
          runner: macos-14
        - swift-version: "5.9"
          xcode-version: "15.0"
          runner: macos-14
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode-version }}.app
    - name: Build and run tests
      run: |
        xcrun swift --version
        if [[ "${{ matrix.swift-version }}" == 6.* ]]; then
          xcrun swift test -Xswiftc -warnings-as-errors
        else
          xcrun swift build -Xswiftc -warnings-as-errors
        fi
